METHOD_BODY := STATEMENT_LIST { node.add_attribute('code', node.children[0].get_attribute('code'))\n }
STATEMENT_LIST := STATEMENT STATEMENT_LIST_2 { node.add_attribute('code', node.children[0].get_attribute('code') + node.children[1].get_attribute('code'))\n }
STATEMENT_LIST_2 := STATEMENT STATEMENT_LIST_2 { node.add_attribute('code', node.children[0].get_attribute('code') + node.children[1].get_attribute('code'))\n }
STATEMENT_LIST_2 := '\L' { node.add_attribute('code', '')\n }
STATEMENT := DECLARATION { node.add_attribute('code', node.children[0].get_attribute('code'))\n }
STATEMENT := IF { node.add_attribute('code', node.children[0].get_attribute('code'))\n }
STATEMENT := WHILE { node.add_attribute('code', node.children[0].get_attribute('code'))\n }
STATEMENT := ASSIGNMENT { node.add_attribute('code', node.children[0].get_attribute('code'))\n }
DECLARATION := PRIMITIVE_TYPE 'id' ';' { node.add_attribute('code', '')\ntype = node.children[0].get_attribute('type')\nif not self.add_var(node.children[1].label[1], type):\n\tself.success = False\n }
PRIMITIVE_TYPE := 'int' { node.add_attribute('type', 'i')\n }
PRIMITIVE_TYPE := 'float' { node.add_attribute('type', 'f')\n }
IF := 'if' '(' EXPRESSION ')' '{' STATEMENT '}' 'else' '{' STATEMENT '}' { node.add_attribute('code', node.children[2].get_attribute('code') + self.get_end_line_no(node.children[9].get_attribute('code')+';') + ';' + node.children[9].get_attribute('code') + 'goto ' + self.get_end_line_no(node.children[5].get_attribute('code')) + ';' + node.children[5].get_attribute('code'))\n }
WHILE := 'while' '(' EXPRESSION ')' '{' STATEMENT '}' { node.add_attribute('code', node.children[2].get_attribute('code') + '+2' + ';' + 'goto +' + str(int(self.get_end_line_no(node.children[5].get_attribute('code'))) + 1) + ';' + node.children[5].get_attribute('code') + 'goto -+' + str(int(self.get_end_line_no(node.children[5].get_attribute('code')+node.children[2].get_attribute('code'))) + 1) + ';')\n }
ASSIGNMENT := 'id' 'assign' EXPRESSION ';' { var = self.get_var(node.children[0].label[1])\nif var is None:\n\tself.success = False\nif self.success:\n\t(idx, type1) = var\n\ttype2 = node.children[2].get_attribute('type')\n\ttype = self.get_result_type(type1, type2)\n\tif type is None:\n\t\tself.success = False\n\tif self.success:\n\t\tnode.add_attribute('code', node.children[2].get_attribute('code') + str(type) + 'store_' + str(idx) + ';')\n  }
EXPRESSION := SIMPLE_EXPRESSION EXPRESSION_2 { type1 = node.children[0].get_attribute('type')\ntype2 = node.children[1].get_attribute('type')\ntype = self.get_result_type(type1, type2)\nif type is None: \n\tself.success = False\nif self.success:\n\tnode.add_attribute('type', type)\n\tnode.add_attribute('code',  node.children[0].get_attribute('code') + node.children[1].get_attribute('code')) }
EXPRESSION_2 := 'relop' SIMPLE_EXPRESSION { type = node.children[1].get_attribute('type')\nnode.add_attribute('type', type)\nrelop=self.get_bytecode_relop(type, node.children[0].label[1])\nnode.add_attribute('code', node.children[1].get_attribute('code') + relop) }
EXPRESSION_2 := '\L' { node.add_attribute('code', '')\nnode.add_attribute('type', None)\n }
SIMPLE_EXPRESSION := TERM SIMPLE_EXPRESSION_2 { type1 = node.children[0].get_attribute('type')\ntype2 = node.children[1].get_attribute('type')\ntype = self.get_result_type(type1, type2)\nif type is None:\n\tself.success = False\nif self.success:\n\tnode.add_attribute('type', type)\n\tnode.add_attribute('code', node.children[0].get_attribute('code') + node.children[1].get_attribute('code'))\n }
SIMPLE_EXPRESSION := SIGN TERM SIMPLE_EXPRESSION_2 { type1 = node.children[1].get_attribute('type')\ntype2 = node.children[2].get_attribute('type')\ntype = self.get_result_type(type1, type2)\nif type is None:\n\tself.success = False\nif self.success:\n\tnode.add_attribute('type', type)\n\tnode.add_attribute('code', node.children[1].get_attribute('code') + 'ldc ' + str(node.children[0].get_attribute('factor')) + ';' + str(type) +'mul;' + node.children[2].get_attribute('code'))\n }
SIMPLE_EXPRESSION_2 := 'addop' TERM SIMPLE_EXPRESSION_2 { type1 = node.children[1].get_attribute('type')\ntype2 = node.children[2].get_attribute('type')\ntype = self.get_result_type(type1, type2)\nif type is None:\n\tself.success = False\nif self.success:\n\tnode.add_attribute('type', type)\n\tnode.add_attribute('code',  node.children[1].get_attribute('code') + node.children[2].get_attribute('code') + self.get_bytecode_addop(type, node.children[0].label[1]) + ';')\n }
SIMPLE_EXPRESSION_2 := '\L' { node.add_attribute('code', '')\nnode.add_attribute('type', None)\n }
TERM := FACTOR TERM_2 { type1 = node.children[0].get_attribute('type')\ntype2 = node.children[1].get_attribute('type')\ntype = self.get_result_type(type1, type2)\nif type is None:\n\tself.success = False\nif self.success:\n\tnode.add_attribute('type', type)\n\tnode.add_attribute('code', node.children[0].get_attribute('code') + node.children[1].get_attribute('code'))\n }
TERM_2 := 'mulop' FACTOR TERM_2 { type1 = node.children[1].get_attribute('type')\ntype2 = node.children[2].get_attribute('type')\ntype = self.get_result_type(type1, type2)\nif type is None:\n\tself.success = False\nif self.success:\n\tnode.add_attribute('type',type)\n\tnode.add_attribute('code', node.children[1].get_attribute('code') + node.children[2].get_attribute('code') +  self.get_bytecode_mulop(type, node.children[0].label[1]) + ';')\n }
TERM_2 := '\L' { node.add_attribute('code', '')\nnode.add_attribute('type', None)\n }
FACTOR := 'id' { var = self.get_var(node.children[0].label[1])\nif var is None:\n\tself.success = False\nif self.success:\n\t(idx, type) = var\n\tnode.add_attribute('type', type)\n\tnode.add_attribute('code', str(type) + 'load_' + str(idx) + ';')\n }
FACTOR := 'num' { val = node.children[0].label[1]\ntype = self.get_num_type(val)\nnode.add_attribute('type', type)\nnode.add_attribute('code', 'ldc ' + str(val) + ';')\n }
FACTOR := '(' EXPRESSION ')' { node.add_attribute('type', node.children[1].get_attribute('type'))\nnode.add_attribute('code', node.children[1].get_attribute('code'))\n }
SIGN := 'addop' { if node.children[0].label[1] == '-':\n\tfactor = -1\nelse:\n\tfactor=1\nnode.add_attribute('factor', factor)\n }